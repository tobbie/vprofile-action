name: vprofile actions
on: workflow_dispatch
env: 
  AWS_REGION: us-east-2
  ECR_REPOSITORY: vprofileapp
  EKS_CLUSTER: vprofile-eks

jobs:
  Testing:
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4
    
      - name: Maven test
        run: mvn clean && mvn test
    
      - name: Checkstyle
        run: mvn checkstyle:checkstyle
      
      #setup java 11 to be default ( see sonarscanner rquirement as of 5.x)

      - name: set java 11
        uses: actions/setup-java@v3
        with: 
          distribution: 'temurin'
          java-version: '11'
      

      # Setup sonar scanner
      #- name: Setup SonarQube
     #   uses: warchant/setup-sonar-scanner@v7

      # Run sonar scanner
      #- name: SonarQube scan
      #  run: sonar-scanner
      #       -Dsonar.host.url=${{ secrets.SONAR_URL }} 
      #       -Dsonar.login=${{ secrets.SONAR_TOKEN }}
      #       -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
      #      -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} 
      #      -Dsonar.sources=src/
      #      -Dsonar.junit.reportsPaths=target/surefire-reports/ 
      #      -Dsonar.jacoco.reportsPaths=target/jacoco.exec 
      #      -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
      #       -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/
             
              

        # check the quality gate status
     # - name: SonarQube quality gate check
     #   id: sonarqube-quality-gate-check
     #   uses: sonarsource/sonarqube-quality-gate-action@master
     #   timeout-minutes: 5
     #   env:
     #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
     #     SONAR_HOST_URL: ${{ secrets.SONAR_URL }}

  Build_And_Publish:
    needs: Testing
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4
      
      - name: Build and Upload image to ECR
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ secrets.REGISTRY }}
          repo: ${{ env.ECR_REPOSITORY }}
          region:  ${{ env.AWS_REGION }}
          tags: latest,${{ github.run_number}}  
          daemon_off: false
          dockerfile: ./Dockerfile
          context: ./

        
  DeployToEKS:
    needs: Build_And_Publish
    runs-on: ubuntu-latest
    steps:
      - name: code checkout
        uses: actions/checkout@v4
      
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: get kube config file
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}

      - name: print kube config file
        run: cat ~/.kube/config

      - name: login to ECR
        run: kubectl create secret docker-registry regcred --docker-server=${{ secrets.REGISTRY }} --docker-username=AWS  --docker-password=(aws ecr get-login-password)

      - name: Deploy Helm
        uses: bitovi/github-actions-deploy-eks-helm@v1.2.9
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          cluster-name: ${{ env.EKS_CLUSTER }}
          #config-files: .github/values/dev.yaml
          chart-path: helm/vprofilecharts
          namespace: default
          values: appimage=${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY }},apptag=${{ github.run_number }}
          name: vprofile-stack